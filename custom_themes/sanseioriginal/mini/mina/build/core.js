// Generated by CoffeeScript 2.0.2
(function() {
  var PageEnhanced, Session, _validation, _validator, config, dialog, form_validator, get_authorize, image, purify_content_img, reform_consignee, reform_userinfo, requests, session, toast, utils;

  requests = require('libs/requests.js');

  Session = require('libs/session.js');

  config = require('config.js');

  utils = require('utils.js');

  image = require('constant/image.js');

  // session
  session = new Session();

  // enhanced page
  PageEnhanced = function(opts) {
    var onLoadFn, onShowFn, self;
    self = this;
    if (!opts) {
      opts = {};
    }
    onLoadFn = opts.onLoad || function(param) {};
    onShowFn = opts.onShow || function() {};
    opts.onLoad = function(param) {
      var app;
      self = this;
      app = getApp();
      self.setData({
        locale: app.locale,
        loaded: false
      });
      if (utils.isFunction(opts.onLoadResolver)) {
        return Promise.resolve().then(function() {
          return opts.onLoadResolver();
        }).then(function() {
          return onLoadFn.call(self, param);
        });
      } else {
        return onLoadFn.call(self, param);
      }
    };
    opts.onShow = function() {
      self = this;
      if (utils.isFunction(opts.onShowResolver)) {
        return Promise.resolve().then(function() {
          return opts.onShowResolver();
        }).then(function() {
          return onShowFn.call(self);
        });
      } else {
        return onShowFn.call(self);
      }
    };
    return Page(opts);
  };

  // interceptor
  requests.config.common.interceptor = function(opts) {
    var token;
    if (!opts.url.match(/^http[s]:.*/)) {
      opts.url = config.baseURL.api + '/' + utils.strip(opts.url, '/');
    }
    opts.after_reject = function(res) {
      var err_path;
      err_path = null;
      switch (res.statusCode) {
        case 401:
          err_path = config.paths.error;
          session.remove('token');
          break;
        case 403:
          err_path = config.paths.error;
          session.remove('token');
          break;
        default:
          err_path = config.paths.error;
      }
      if (err_path) {
        return wx.redirectTo({
          url: err_path
        });
      }
    };
    opts.header = opts.header || {};
    token = session.get('token');
    if (token && !opts.header.Authorization) {
      opts.header = {
        Authorization: 'Bearer ' + token
      };
    }
    return opts;
  };

  // authorize
  get_authorize = function(scope_name, callback) {
    var opts;
    if (!opts) {
      opts = {};
    }
    return wx.getSetting({
      success: function(data) {
        return callback(data.authSetting[scope_name]);
      },
      fail: function(error) {
        return callback(null, error);
      }
    });
  };

  // form validator
  _validator = {
    required: function(value) {
      return /.+/i.test(value.replace(' ', ''));
    }
  };

  _validation = function(rules, value) {
    var i, len, rule;
    if (utils.isString(rules)) {
      rules = [rules];
    } else if (!utils.isArray(rules)) {
      return null;
    }
    for (i = 0, len = rules.length; i < len; i++) {
      rule = rules[i];
      try {
        if (_validator[rule] && !_validator[rule](value)) {
          return false;
        }
      } catch (error1) {
        return false;
      }
    }
    return true;
  };

  form_validator = {
    validate: function(from_value, rules) {
      var ffv, k, v;
      if (!utils.isDict(rules, true)) {
        return;
      }
      ffv = {};
      for (k in from_value) {
        v = from_value[k];
        ffv[k] = _validation(rules[k], v);
      }
      for (k in ffv) {
        v = ffv[k];
        if (v === false) {
          ffv.$error = true;
        }
      }
      return ffv;
    },
    setPristine: function(ffv, field_name) {
      var e, k, v;
      try {
        delete ffv[field_name];
      } catch (error1) {
        e = error1;
        console.error(e);
      }
      for (k in ffv) {
        v = ffv[k];
        if (v === false) {
          ffv.$error = true;
        }
      }
      return ffv;
    }
  };

  reform_consignee = function(info) {
    var payload;
    payload = {
      name: info.userName,
      detail: info.detailInfo,
      tel: info.telNumber,
      province: info.provinceName,
      city: info.cityName,
      county: info.countyName,
      postal_code: info.postalCode,
      recipient: [info.userName, info.telNumber, info.provinceName, info.cityName, info.countyName, info.detailInfo, '[' + info.postalCode + ']'].join(' ')
    };
    return payload;
  };

  reform_userinfo = function(userinfo) {
    var _gender_map, info;
    if (!userinfo) {
      userinfo = {};
    }
    _gender_map = {
      1: 1, // male
      2: 0, // female
      0: 2 // unknow
    };
    info = {
      country: userinfo.country || '',
      province: userinfo.province || '',
      city: userinfo.city || '',
      language: userinfo.language || 'zh_CN',
      name: userinfo.nickName || '',
      avatar: userinfo.avatarUrl || '',
      gender: _gender_map[userinfo.gender] || 0
    };
    return info;
  };

  purify_content_img = function(text, cls_name) {
    if (!cls_name) {
      cls_name = 'img';
    }
    return text.replace(/<img\s.*?>/ig, function(img) {
      var regex, replace;
      if (img.includes(' class=')) {
        regex = /class=[\"\'](.*?)[\"\']/;
        replace = 'class="$1 ' + cls_name + '"';
      } else {
        regex = /\<img\s(.*?)>/;
        replace = '<img class="' + cls_name + '" $1 >';
      }
      return img.replace(regex, replace);
    });
  };

  // toast
  toast = function(opts, callback) {
    if (!opts) {
      opts = {};
    }
    if (!opts.duration) {
      opts.duration = 2400;
    }
    return wx.showToast({
      title: opts.title || '',
      icon: opts.icon || 'none',
      image: opts.image,
      duration: opts.duration,
      mask: opts.mask || true,
      complete: function() {
        if (utils.isFunction(callback)) {
          return setTimeout(function() {
            return callback();
          }, opts.duration);
        }
      }
    });
  };

  // model
  dialog = {
    confirm: function(opts) {
      var modal_opts;
      if (!opts) {
        opts = {};
      }
      if (!utils.isFunction(opts.confirm)) {
        opts.confirm = function() {};
      }
      if (!utils.isFunction(opts.cancel)) {
        opts.cancel = function() {};
      }
      modal_opts = {
        title: opts.title || '',
        content: opts.content || '',
        success: function(result) {
          if (result.confirm) {
            return opts.confirm();
          } else {
            return opts.cancel(result.cancel);
          }
        },
        fail: function() {
          return opts.cancel(null);
        }
      };
      if (opts.confirmColor) {
        modal_opts.confirmColor = opts.confirmColor;
      }
      if (opts.confirmText) {
        modal_opts.confirmText = opts.confirmText;
      }
      if (opts.cancelColor) {
        modal_opts.cancelColor = opts.cancelColor;
      }
      if (opts.cancelText) {
        modal_opts.cancelText = opts.cancelText;
      }
      return wx.showModal(modal_opts);
    },
    alert: function(opts) {
      var modal_opts;
      if (!opts) {
        opts = {};
      }
      if (!utils.isFunction(opts.confirm)) {
        opts.confirm = function() {};
      }
      modal_opts = {
        title: opts.title || '',
        content: opts.content || '',
        showCancel: false,
        success: function(result) {
          if (result.confirm) {
            return opts.confirm();
          }
        }
      };
      if (opts.confirmColor) {
        modal_opts.confirmColor = opts.confirmColor;
      }
      if (opts.confirmText) {
        modal_opts.confirmText = opts.confirmText;
      }
      return wx.showModal(modal_opts);
    }
  };

  module.exports = {
    Page: PageEnhanced,
    config: config,
    session: session,
    image: image,
    get_authorize: get_authorize,
    form_validator: form_validator,
    reform_consignee: reform_consignee,
    reform_userinfo: reform_userinfo,
    purify_content_img: purify_content_img,
    toast: toast,
    dialog: dialog
  };

}).call(this);
