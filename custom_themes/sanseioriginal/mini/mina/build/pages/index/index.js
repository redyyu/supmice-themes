// Generated by CoffeeScript 2.0.2
(function() {
  var app, core, restStore, utils;

  core = require('../../core.js');

  utils = require('../../utils.js');

  restStore = require('../../restapi/store.js');

  app = getApp();

  core.Page({
    data: {
      meta: null,
      content: '',
      has_more: null
    },
    paged: 1,
    timestamp: null,
    // lifecycle
    onShareAppMessage: function() {
      return app.share();
    },
    onLoad: function(opts) {
      var self;
      self = this;
      app.set_tabs();
      return self.load();
    },
    onShow: function() {
      var self;
      return self = this;
    },
    onPullDownRefresh: function() {
      var self;
      self = this;
      if (!self.data.loaded) {
        return;
      }
      return self.load().finally(function() {
        return wx.stopPullDownRefresh();
      });
    },
    onReachBottom: function() {
      var self;
      self = this;
      if (self.data.has_more === true) {
        self.paged += 1;
        return self.list();
      }
    },
    // methods
    load: function() {
      var self;
      self = this;
      self.paged = 1;
      self.timestamp = utils.now();
      self.setData({
        products: [],
        has_more: null,
        loaded: false
      });
      return restStore.page.get('index').then(function(page) {
        app.set_navbar(page.meta.title);
        return self.setData({
          meta: page.meta,
          content: page.content,
          loaded: true
        });
      }).then(function() {
        return self.list();
      });
    },
    list: function() {
      var self;
      self = this;
      self.setData({
        is_loading: true
      });
      return restStore.product.list({
        paged: self.paged,
        t: self.timestamp
      }).then(function(results) {
        var last_one;
        last_one = results[results.length - 1] || {
          _more: false,
          _count: 0
        };
        return self.setData({
          products: self.data.products.concat(results),
          has_more: last_one._more
        });
      }).finally(function() {
        return self.setData({
          is_loading: false
        });
      });
    },
    enter: function(e) {
      var item, self;
      self = this;
      item = e.currentTarget.dataset.item;
      if (!item) {
        return;
      }
      return app.nav.go({
        route: core.config.paths.item,
        args: {
          slug: item.slug
        }
      });
    },
    enter_slide: function(e) {
      var item_slug, self, slide;
      self = this;
      slide = e.currentTarget.dataset.slide;
      if (!slide || !slide.link) {
        return;
      }
      try {
        item_slug = utils.strip(slide.link, '/').split('/').reverse()[0];
      } catch (error) {
        return;
      }
      return app.nav.go({
        route: core.config.paths.item,
        args: {
          slug: item_slug
        }
      });
    }
  });

}).call(this);
