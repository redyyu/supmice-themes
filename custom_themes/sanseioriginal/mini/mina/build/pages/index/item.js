// Generated by CoffeeScript 2.0.2
(function() {
  var app, core, deco, restCustomer, restStore, utils;

  core = require('../../core.js');

  utils = require('../../utils.js');

  deco = require('../../decorators.js');

  restStore = require('../../restapi/store.js');

  restCustomer = require('../../restapi/customer.js');

  app = getApp();

  core.Page({
    data: {
      meta: {},
      content: '',
      amount: 1,
      shelf: null,
      sku_list: [],
      sel_sku: null,
      sheet_status: false,
      sku_status: null,
      display_rules: false,
      image: core.image,
      action_type: null
    },
    slug: null,
    sel_attrs: {},
    // lifecycle
    onShareAppMessage: function(opts) {
      var e, img_src, meta, self, share_obj, share_path, share_sid, share_ticket, title;
      self = this;
      meta = self.data.meta;
      if (meta) {
        try {
          img_src = meta.featured_img.src;
        } catch (error) {
          e = error;
          img_src = '';
        }
        title = meta.title || null;
        share_path = core.config.paths.item + '?slug=' + meta.slug;
        if (opts.target && opts.target.id === 'bargain-share') {
          share_sid = core.session.get('share_sid') || '';
          share_ticket = core.session.get('share_ticket') || '';
          try {
            share_path += '&sid=' + share_sid + '&ticket=' + share_ticket;
          } catch (error) {
            e = error;
            console.error(e);
          }
        }
        console.info(share_path);
        share_obj = {
          title: title,
          src: img_src,
          path: share_path
        };
      } else {
        share_obj = {};
      }
      self.close_bargain_modal();
      return app.share(share_obj);
    },
    onLoad: function(opts) {
      var self;
      self = this;
      self.slug = opts.slug;
      return self.load().then(function() {
        return self.make_bargain(opts.sid, opts.ticket);
      });
    },
    onShow: function() {
      var self;
      self = this;
      return self.setData({
        count_cart_items: app.cart.list().length
      });
    },
    // methods
    load: function() {
      var self;
      self = this;
      self.setData({
        loaded: false
      });
      return restStore.product.get(self.slug).then(function(product) {
        app.set_navbar(product.meta.title);
        return self.setData({
          meta: product.meta,
          content: core.purify_content_img(product.content)
        });
      }).then(function() {
        return restStore.product.shelf(self.slug);
      }).then(function(data) {
        var i, len, ref, spec;
        // init selectable attrs
        if (utils.isArray(data.shelf.spec, true)) {
          ref = data.shelf.spec;
          for (i = 0, len = ref.length; i < len; i++) {
            spec = ref[i];
            self.sel_attrs[spec.key] = null;
          }
          data.shelf.spec = self._organize_spec(data.shelf.spec, data.sku_list);
        }
        return self.setData({
          loaded: true,
          shelf: data.shelf,
          sku_list: data.sku_list,
          sku_status: self._check_sku_status(data.sku_list),
          discounts: data.discounts,
          bargain: data.bargain
        });
      });
    },
    toggle_rules_display: function(e) {
      var display_status, self;
      self = this;
      display_status = Boolean(e.currentTarget.dataset.display);
      return self.setData({
        display_rules: display_status
      });
    },
    close_bargain_modal: function() {
      var self;
      self = this;
      return self.setData({
        bargain_modal_status: false
      });
    },
    make_bargain: function(sid, ticket) {
      var opts, self;
      self = this;
      if (!sid || !ticket || self._has_bargained(ticket)) {
        return;
      }
      opts = {
        sid: sid,
        refresh: true
      };
      return restStore.bargain(self.slug, opts).then(function(report) {
        return self._record_bargained(ticket, report.sid, report.expires_in - 60);
      });
    },
    open_customer_bargain: deco.login_required(function() {
      var self, shelf;
      self = this;
      shelf = self.data.shelf;
      if (!shelf) {
        return;
      }
      return restCustomer.bargain.open({
        sid: core.session.get('share_sid'),
        item_id: shelf.commodity_id
      }).then(function(res) {
        if (res.sid) {
          core.session.set('share_sid', res.sid, res.expires_in - 60);
          core.session.set('share_ticket', res.ticket, res.expires_in - 60);
          self._record_bargained(res.ticket, res.sid, res.expires_in - 60);
          res.remain_hours = utils.parse_int(res.expires_in / 3600 * 10) / 10;
          return self.setData({
            bargain_report: res,
            bargain_modal_status: true
          });
        } else {
          return self.setData({
            bargain_report: null,
            bargain_modal_status: false
          });
        }
      });
    }),
    goto_cart: function() {
      return app.nav.tab({
        route: core.config.paths.cart
      });
    },
    open_sheet: function(e) {
      var self;
      self = this;
      return self.setData({
        action_type: e.currentTarget.dataset.actionType,
        shelf: self._clear_shelf_selected(),
        sel_sku: null,
        amount: 1,
        sheet_status: true
      });
    },
    select_spec: function(e) {
      var curr_opt_idx, curr_selected, curr_spec, i, idx, j, len, len1, opt, ref, self, shelf_spec, spec, spec_key;
      self = this;
      spec_key = e.currentTarget.dataset.specKey;
      curr_opt_idx = e.currentTarget.dataset.optIndex;
      curr_selected = e.currentTarget.dataset.selected;
      curr_spec = false;
      shelf_spec = self.data.shelf.spec;
      for (i = 0, len = shelf_spec.length; i < len; i++) {
        spec = shelf_spec[i];
        if (spec.key === spec_key) {
          curr_spec = spec;
        }
      }
      if (!curr_spec) {
        return;
      }
      ref = curr_spec.options;
      for (idx = j = 0, len1 = ref.length; j < len1; idx = ++j) {
        opt = ref[idx];
        opt.selected = idx === curr_opt_idx ? !curr_selected : false;
      }
      if (curr_selected) {
        self.sel_attrs[curr_spec.key] = null;
      } else {
        self.sel_attrs[curr_spec.key] = curr_spec.options[curr_opt_idx].value;
      }
      self.data.shelf.spec = self._organize_spec(shelf_spec, self.data.sku_list);
      return self.setData({
        sel_sku: self._find_selected_sku(),
        amount: 1,
        shelf: self.data.shelf
      });
    },
    increase_amount: function() {
      var amount, curr_sku, self;
      self = this;
      curr_sku = self.data.sel_sku || {
        qty: 1
      };
      amount = Math.max(self.data.amount += 1, 1);
      return self.setData({
        amount: Math.min(amount, curr_sku.qty)
      });
    },
    decrease_amount: function() {
      var amount, self;
      self = this;
      amount = Math.max(self.data.amount -= 1, 1);
      return self.setData({
        amount: amount
      });
    },
    buy: function(e) {
      var action_type, cart_item, old_cart_item, self, sku;
      self = this;
      action_type = e.currentTarget.dataset.actionType;
      self.setData({
        action_type: null,
        sheet_status: false
      });
      sku = self.data.sel_sku;
      if (!sku) {
        return;
      }
      cart_item = {
        id: sku.id,
        item_id: sku.commodity_id,
        name: sku.name,
        figure: self._get_sku_figure_src(sku),
        detail: sku.detail,
        attrs: sku.attrs,
        hash: sku.hash,
        signature: sku.signature,
        price: sku.dis_price !== null ? sku.dis_price : sku.price,
        amount: self.data.amount,
        discounts: self._get_discount_tagnames()
      };
      // purchase
      if (action_type === 'purchase') {
        app.checkout.sync([cart_item]);
        return app.nav.go({
          route: core.config.paths.purchase,
          args: {
            direct: true
          }
        });
      } else {
        // add to cart
        old_cart_item = app.cart.get(cart_item.id);
        if (old_cart_item) {
          cart_item.amount += old_cart_item.amount;
          app.cart.update(cart_item);
        } else {
          app.cart.add(cart_item);
        }
        return self.setData({
          count_cart_items: app.cart.list().length
        });
      }
    },
    // helpers
    _check_sku_status: function(sku_list) {
      var count_qty;
      if (!sku_list || sku_list.length <= 0) {
        return 0;
      }
      count_qty = sku_list.reduce(function(x, y) {
        return x + y.qty;
      }, 0);
      if (count_qty > 0) {
        return 1;
      } else {
        return 2;
      }
    },
    _organize_spec: function(shelf_spec, sku_list) {
      var __check_opt_in_skus, __sel_option, _tmp_list, i, j, l, len, len1, len2, opt, ref, s, sel_op, self, sku, spec, stock_list;
      self = this;
      __check_opt_in_skus = function(k, v, skus) {
        var i, len, sku;
        for (i = 0, len = skus.length; i < len; i++) {
          sku = skus[i];
          if (sku.attrs[k] === v) {
            return true;
          }
        }
        return false;
      };
      __sel_option = function(opts) {
        var i, len, op;
        for (i = 0, len = opts.length; i < len; i++) {
          op = opts[i];
          if (op.selected) {
            return op;
          }
        }
        return {};
      };
      stock_list = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = sku_list.length; i < len; i++) {
          sku = sku_list[i];
          if (sku.qty > 0) {
            results.push(sku);
          }
        }
        return results;
      })();
      for (i = 0, len = shelf_spec.length; i < len; i++) {
        spec = shelf_spec[i];
        _tmp_list = stock_list;
        for (j = 0, len1 = shelf_spec.length; j < len1; j++) {
          s = shelf_spec[j];
          if (s.key === spec.key) {
            continue;
          }
          sel_op = __sel_option(s.options);
          if (sel_op.value) {
            _tmp_list = (function() {
              var l, len2, results;
              results = [];
              for (l = 0, len2 = _tmp_list.length; l < len2; l++) {
                sku = _tmp_list[l];
                if (sku.attrs[s.key] === sel_op.value) {
                  results.push(sku);
                }
              }
              return results;
            })();
          }
        }
        ref = spec.options;
        for (l = 0, len2 = ref.length; l < len2; l++) {
          opt = ref[l];
          if (__check_opt_in_skus(spec.key, opt.value, _tmp_list)) {
            opt.disabled = false;
          } else {
            opt.disabled = true;
          }
        }
      }
      return shelf_spec;
    },
    _clear_shelf_selected: function() {
      var i, j, len, len1, op, ref, ref1, self, spec;
      self = this;
      ref = self.data.shelf.spec;
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        ref1 = spec.options;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          op = ref1[j];
          delete op.selected;
        }
      }
      return self.data.shelf;
    },
    _find_selected_sku: function() {
      var __match_attrs, i, k, len, ref, ref1, self, sku, v;
      self = this;
      if (!self.data.shelf.is_various) {
        if (self.data.sku_list[0] && self.data.sku_list[0].qty > 0) {
          return self.data.sku_list[0];
        } else {
          return null;
        }
      }
      ref = self.sel_attrs;
      for (k in ref) {
        v = ref[k];
        if (!v) {
          return null;
        }
      }
      __match_attrs = function(sku) {
        var ref1;
        ref1 = self.sel_attrs;
        for (k in ref1) {
          v = ref1[k];
          if (sku.attrs[k] !== v) {
            return false;
          }
        }
        return true;
      };
      ref1 = self.data.sku_list;
      for (i = 0, len = ref1.length; i < len; i++) {
        sku = ref1[i];
        if (__match_attrs(sku)) {
          return sku;
        }
      }
      return null;
    },
    _get_sku_figure_src: function(sku) {
      var i, j, len, len1, opt, ref, ref1, self, spec;
      self = this;
      if (!self.data.shelf || !utils.isArray(self.data.shelf.spec)) {
        return '';
      }
      ref = self.data.shelf.spec;
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        ref1 = spec.options;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          opt = ref1[j];
          if (sku.attrs[spec.key] === opt.value && opt.src) {
            return opt.src;
          }
        }
      }
      return self.data.meta.featured_img.src || '';
    },
    _get_discount_tagnames: function() {
      var discount, e, self;
      self = this;
      try {
        return (function() {
          var i, len, ref, results;
          ref = self.data.discounts;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            discount = ref[i];
            results.push(discount.tagname);
          }
          return results;
        })();
      } catch (error) {
        e = error;
        return null;
      }
    },
    _has_bargained: function(ticket) {
      var bargained;
      bargained = core.session.get('bargained');
      if (!utils.isObject(bargained)) {
        bargained = {};
      }
      if (Object.keys(bargained).length > 60) {
        return true;
      }
      return Boolean(bargained[ticket]);
    },
    _record_bargained: function(ticket, sid, expires_in) {
      var bargained;
      if (!sid || !ticket) {
        return;
      }
      bargained = core.session.get('bargained') || {};
      if (!utils.isObject(bargained)) {
        bargained = {};
      }
      bargained[ticket] = sid;
      if (Object.keys(bargained).length > 60) {
        return true;
      }
      core.session.set('bargained', bargained, expires_in);
      return true;
    }
  });

}).call(this);
