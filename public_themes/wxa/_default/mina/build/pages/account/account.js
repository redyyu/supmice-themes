// Generated by CoffeeScript 2.0.2
(function() {
  var app, core, deco, restCustomer, restStore, utils;

  core = require('../../core.js');

  deco = require('../../decorators.js');

  utils = require('../../utils.js');

  restStore = require('../../restapi/store.js');

  restCustomer = require('../../restapi/customer.js');

  app = getApp();

  core.Page({
    data: {
      image: core.image,
      orders: [],
      total_count: null,
      has_more: false,
      logged: null
    },
    timestamp: null,
    // lifecycle
    onLoad: deco.login_required(function(opts) {
      var self;
      self = this;
      app.set_navbar(core.static_title.account);
      app.get_profile(function(profile) {
        return self.setData({
          profile: profile
        });
      });
      self.refresh();
      return self.setData({
        logged: true
      });
    }),
    onPullDownRefresh: function() {
      var self;
      self = this;
      if (!self.data.logged) {
        wx.stopPullDownRefresh();
        return;
      }
      return self.refresh().finally(function() {
        return wx.stopPullDownRefresh();
      });
    },
    onReachBottom: function() {
      var self;
      self = this;
      if (!self.data.logged) {
        return;
      }
      if (self.data.has_more === true) {
        return self.list_orders();
      }
    },
    // hanlders
    refresh: function() {
      var self;
      self = this;
      self.timestamp = utils.now();
      self.setData({
        orders: [],
        has_more: null
      });
      return self.list_orders();
    },
    list_orders: function() {
      var self;
      self = this;
      return restCustomer.order.list({
        offset: self.data.orders.length,
        t: self.timestamp
      }).then(function(results) {
        var last_one, orders;
        orders = self.data.orders.concat(results);
        last_one = results[0] || {
          _more: false,
          _count: 0
        };
        return self.setData({
          orders: orders,
          has_more: last_one._more,
          total_count: last_one._count
        });
      });
    },
    check_detail: function(e) {
      var order, self;
      self = this;
      order = e.currentTarget.dataset.order;
      if (!order) {
        return;
      }
      return app.nav.go({
        route: core.config.paths.order,
        args: {
          id: order.id
        }
      });
    },
    go_buy: function() {
      return app.nav.tab({
        route: core.config.paths.index
      });
    },
    // member
    join_member: function(e) {
      var encrypted_data, iv, self;
      self = this;
      encrypted_data = e.detail.encryptedData;
      iv = e.detail.iv;
      if (!encrypted_data || !iv) {
        return;
      }
      return wx.checkSession({
        success: function() {
          return self._join(encrypted_data, iv);
        },
        fail: function() {
          return app.login(function() {
            return self._join(encrypted_data, iv);
          }, true);
        }
      });
    },
    _join: function(encrypted_data, iv) {
      var self;
      self = this;
      return restCustomer.member.create({
        encrypted_data: encrypted_data,
        iv: iv
      }).then(function(profile) {
        return app.set_profile(profile, function(profile) {
          return self.setData({
            profile: profile
          });
        });
      });
    },
    sync_profile: function(e) {
      var profile, self;
      self = this;
      profile = core.reform_userinfo(e.detail.userInfo);
      return app.set_profile(profile, function(profile) {
        return self.setData({
          profile: profile
        });
      });
    }
  });

}).call(this);
