// Generated by CoffeeScript 2.0.2
(function() {
  var app, core, restCustomer, restStore, utils;

  core = require('../../core.js');

  utils = require('../../utils.js');

  restStore = require('../../restapi/store.js');

  restCustomer = require('../../restapi/customer.js');

  app = getApp();

  core.Page({
    data: {
      image: core.image,
      total_price: 0,
      item_list: [],
      checked_all: false,
      edit_mode: false,
      is_empty: false
    },
    // lifecycle
    onLoad: function(opts) {
      var self;
      self = this;
      return app.set_navbar(core.static_title.cart);
    },
    onShow: function() {
      var self;
      self = this;
      return self.refresh();
    },
    // hanlders
    refresh: function() {
      var i, item, item_list, len, self;
      self = this;
      item_list = app.cart.list();
      for (i = 0, len = item_list.length; i < len; i++) {
        item = item_list[i];
        item._checked = true;
      }
      return self.setData({
        item_list: item_list,
        is_empty: item_list.length === 0,
        checked_count: self._count_checked(item_list),
        total_price: self._total_price(item_list)
      });
    },
    toggle_checked_all: function() {
      var all_checked, chk_count, i, item, item_list, len, self;
      self = this;
      item_list = self.data.item_list;
      chk_count = self._count_checked(item_list);
      all_checked = chk_count >= item_list.length;
      for (i = 0, len = item_list.length; i < len; i++) {
        item = item_list[i];
        item._checked = !all_checked;
      }
      return self.setData({
        item_list: item_list,
        checked_count: self._count_checked(item_list),
        total_price: self._total_price(item_list)
      });
    },
    toggle_edit_mode: function(e) {
      var edit_mode, self;
      self = this;
      edit_mode = !self.data.edit_mode;
      return self.setData({
        edit_mode: edit_mode
      });
    },
    check_item: function(e) {
      var index, item, item_list, self;
      self = this;
      if (self.edit_mode) {
        return;
      }
      index = e.currentTarget.dataset.itemIndex;
      item_list = self.data.item_list;
      item = item_list[index];
      if (!item) {
        return;
      }
      item._checked = !item._checked;
      item_list[index] = item;
      return self.setData({
        item_list: item_list,
        checked_count: self._count_checked(item_list),
        total_price: self._total_price(item_list)
      });
    },
    remove_item: function(e) {
      var edit_mode, index, item, item_list, self;
      self = this;
      if (self.edit_mode) {
        return;
      }
      index = e.currentTarget.dataset.itemIndex;
      item_list = self.data.item_list;
      item = item_list[index];
      if (!item) {
        return;
      }
      app.cart.remove(item);
      item_list.splice(index, 1);
      edit_mode = self.data.edit_mode && item_list.length === 0 ? false : self.data.edit_mode;
      return self.setData({
        item_list: item_list,
        checked_count: self._count_checked(item_list),
        total_price: self._total_price(item_list),
        edit_mode: edit_mode
      });
    },
    increase_amount: function(e) {
      var index, item, item_list, self;
      self = this;
      index = e.currentTarget.dataset.itemIndex;
      item_list = self.data.item_list;
      item = item_list[index];
      if (!item) {
        return;
      }
      item.amount = Math.max(item.amount += 1, 1);
      item_list[index] = item;
      app.cart.update(item);
      return self.setData({
        item_list: item_list,
        total_price: self._total_price(item_list)
      });
    },
    decrease_amount: function(e) {
      var index, item, item_list, self;
      self = this;
      index = e.currentTarget.dataset.itemIndex;
      item_list = self.data.item_list;
      item = item_list[index];
      if (!item) {
        return;
      }
      item.amount = Math.max(item.amount -= 1, 1);
      item_list[index] = item;
      app.cart.update(item);
      return self.setData({
        item_list: item_list,
        total_price: self._total_price(item_list)
      });
    },
    purchase: function() {
      var checked_items, item, item_list, self;
      self = this;
      if (!self.data.checked_count) {
        return;
      }
      item_list = self.data.item_list;
      checked_items = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = item_list.length; i < len; i++) {
          item = item_list[i];
          if (item._checked) {
            results.push(item);
          }
        }
        return results;
      })();
      app.checkout.sync(checked_items);
      return app.nav.go({
        route: core.config.paths.purchase
      });
    },
    // helpers
    _total_price: function(item_list) {
      var i, item, item_price, len, total_price;
      total_price = 0;
      for (i = 0, len = item_list.length; i < len; i++) {
        item = item_list[i];
        if (item._checked) {
          item_price = item.amount * item.price;
          total_price += item_price;
        }
      }
      return total_price;
    },
    _count_checked: function(item_list) {
      var count_checked;
      count_checked = item_list.reduce(function(x, y) {
        var _c;
        _c = y._checked ? 1 : 0;
        return x + _c;
      }, 0);
      return count_checked;
    }
  });

}).call(this);
