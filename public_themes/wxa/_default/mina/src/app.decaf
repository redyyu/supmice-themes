Navigation = require('libs/navigation.js')
Cart = require('libs/cart.js')

utils = require('utils.js')
core = require('core.js')

restStore = require('restapi/store.js')
restCustomer = require('restapi/customer.js')


# app
App
  project:
    name: 'WeChat Store Default'
    version: '2.0.0'
    creator: [
      'Redyyu'
    ]

  # trigger
  onLaunch: (opts)->
    self = @
    console.info 'Launched...'
    console.info '-------------------'
    console.info self.project.name
    console.info self.project.version
    console.info self.project.creator.join(', ')


  onShow: (opts)->
    self = @
    wx.hideTabBar()
    restStore.store.get()
    .then (store)->
      self.store = store

      # login
      self.login()

      # tab bar
      wx.showTabBar()
      tabs = core.config.tabs[store.lang] or []
      for tab, idx in tabs
        wx.setTabBarItem
          index: idx
          text: tab

      # attach locale to pages
      setTimeout ->
        for page in getCurrentPages()
          page.setData
            store: store
      , 600


  # global data
  store: null
  pages: []


  # instances
  nav: new Navigation()
  cart: new Cart()
  checkout: new Cart({infinity: true})

  # methods
  navbar_interval_id: null
  set_navbar: (title, text_style, bgcolor)->
    self = @
    if self.navbar_interval_id
      clearInterval(self.navbar_interval_id)
    self.navbar_interval_id = setInterval ->
      return if not self.store
      site_meta = self.store.site_meta or {}
      default_title = site_meta.title or site_meta.slug

      if self.store.locale and utils.isDict(title)
        locale = self.store.locale.toLowerCase()
        lang = locale.split('_')[0]
        title = title[lang] or title[locale]

      wx.setNavigationBarTitle
        title: title or default_title
      if text_style or bgcolor
        wx.setNavigationBarColor
          frontColor: text_style or 'white'
      clearInterval(self.navbar_interval_id)
    , 100

  login_status: false
  login: (callback, force)->
    self = @
    if not utils.isFunction(callback)
      callback = ->
    if core.session.get('token') and not force
      # logged
      callback()
      return
    else if self.login_status
      # other process is try to login
      _loop = 60
      interval_id = setInterval ->
        if not self.login_status and core.session.get('token')
          clearInterval(interval_id)
          callback()
        else if _loop < 0
          clearInterval(interval_id)
        else
          _loop -= 1
      , 600
    else
      # try to login
      _login = (callback, retry)->
        retry = if not utils.isNumber(retry) then 0 else retry + 1
        if retry >= core.config.retry
          wx.redirectTo
            url: core.config.paths.error
          return
        else if retry > 0
          console.info 'retry:', retry
        self.login_status = true

        wx.login
          success: (data) ->
            # get session_key and serve in back-end
            restCustomer.login
              code: data.code
            .then (auth)->
              self.login_status = false
              core.session.set('token', auth.token, auth.expires_in - 60)
              callback()
            .catch (error)->
              self.login_status = false
              _login(callback, retry)
          fail: ->
            self.login_status = false
            _login(callback, retry)
      _login(callback)

  share: (opts)->
    self = @
    if not opts
      try
        opts =
          title: self.store.site_meta.title or self.store.site_meta.slug
          src: self.store.site_meta.share_img
          path: null
      catch e
        opts = {}

    share_opts =
      title: opts.title
      imageUrl: opts.src
      path: opts.path

    return share_opts

  get_profile: (callback)->
    self = @
    if not utils.isFunction(callback)
      callback = ->
    if self.profile
      callback(profile)
    else
      restCustomer.member.get()
      .then (profile)->
        self.profile = profile
        callback(profile)

  set_profile: (profile, callback)->
    self = @
    if not utils.isFunction(callback)
      callback = ->
    restCustomer.member.update
      meta: profile
    .then (profile)->
      self.profile = profile
      callback(profile)
